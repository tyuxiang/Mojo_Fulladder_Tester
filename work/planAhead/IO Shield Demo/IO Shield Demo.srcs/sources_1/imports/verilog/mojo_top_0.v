/*
   This file was generated automatically by Alchitry Labs version 1.1.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg a,
    output reg b,
    output reg c,
    input sum,
    input carry
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_2 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [3-1:0] M_seg_sel;
  reg [6-1:0] M_seg_values;
  multi_seven_seg_3 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [6-1:0] M_dec_ctr_digits;
  reg [1-1:0] M_dec_ctr_inc;
  multi_dec_ctr_4 dec_ctr (
    .clk(clk),
    .rst(rst),
    .inc(M_dec_ctr_inc),
    .digits(M_dec_ctr_digits)
  );
  wire [1-1:0] M_ctr_value;
  counter_5 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  localparam START_state = 4'd0;
  localparam ZERO_state = 4'd1;
  localparam ONE_state = 4'd2;
  localparam TWO_state = 4'd3;
  localparam THREE_state = 4'd4;
  localparam FOUR_state = 4'd5;
  localparam FIVE_state = 4'd6;
  localparam SIX_state = 4'd7;
  localparam SEVEN_state = 4'd8;
  localparam ERROR_state = 4'd9;
  
  reg [3:0] M_state_d, M_state_q = START_state;
  
  always @* begin
    M_state_d = M_state_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = {3'h0, io_button};
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    M_edge_detector_in = 1'bz;
    M_dec_ctr_inc = 1'h0;
    M_seg_values = 6'bzzzzzz;
    io_seg = 8'bzzzzzzzz;
    io_sel = 4'bzzzz;
    if (io_dip[16+7+0-:1]) begin
      M_edge_detector_in = M_ctr_value;
      M_seg_values = M_dec_ctr_digits;
      io_seg = ~M_seg_seg;
      io_sel = ~M_seg_sel;
    end
    a = io_dip[0+0+0-:1];
    b = io_dip[0+1+0-:1];
    c = io_dip[0+2+0-:1];
    io_led = io_dip;
    io_led[0+0+0-:1] = sum;
    io_led[0+1+0-:1] = carry;
    
    case (M_state_q)
      START_state: begin
        if (io_dip[16+7+0-:1]) begin
          M_state_d = ZERO_state;
        end
      end
      ZERO_state: begin
        a = 1'h0;
        b = 1'h0;
        c = 1'h0;
        if (M_edge_detector_out) begin
          M_state_d = ONE_state;
          if (sum != 1'h0 | carry != 1'h0) begin
            M_state_d = ERROR_state;
          end
          M_dec_ctr_inc = 1'h1;
        end
      end
      ONE_state: begin
        a = 1'h1;
        b = 1'h0;
        c = 1'h0;
        if (M_edge_detector_out) begin
          M_state_d = TWO_state;
          if (sum != 1'h1 | carry != 1'h0) begin
            M_state_d = ERROR_state;
          end
          M_dec_ctr_inc = 1'h1;
        end
      end
      TWO_state: begin
        a = 1'h0;
        b = 1'h1;
        c = 1'h0;
        if (M_edge_detector_out) begin
          M_state_d = THREE_state;
          if (sum != 1'h1 | carry != 1'h0) begin
            M_state_d = ERROR_state;
          end
          M_dec_ctr_inc = 1'h1;
        end
      end
      THREE_state: begin
        a = 1'h1;
        b = 1'h1;
        c = 1'h0;
        if (M_edge_detector_out) begin
          M_state_d = FOUR_state;
          if (sum != 1'h0 | carry != 1'h1) begin
            M_state_d = ERROR_state;
          end
          M_dec_ctr_inc = 1'h1;
        end
      end
      FOUR_state: begin
        a = 1'h0;
        b = 1'h0;
        c = 1'h1;
        if (M_edge_detector_out) begin
          M_state_d = FIVE_state;
          if (sum != 1'h1 | carry != 1'h0) begin
            M_state_d = ERROR_state;
          end
          M_dec_ctr_inc = 1'h1;
        end
      end
      FIVE_state: begin
        a = 1'h1;
        b = 1'h0;
        c = 1'h1;
        if (M_edge_detector_out) begin
          M_state_d = SIX_state;
          if (sum != 1'h0 | carry != 1'h1) begin
            M_state_d = ERROR_state;
          end
          M_dec_ctr_inc = 1'h1;
        end
      end
      SIX_state: begin
        a = 1'h0;
        b = 1'h1;
        c = 1'h1;
        if (M_edge_detector_out) begin
          M_state_d = SEVEN_state;
          if (sum != 1'h0 | carry != 1'h1) begin
            M_state_d = ERROR_state;
          end
          M_dec_ctr_inc = 1'h1;
        end
      end
      SEVEN_state: begin
        a = 1'h1;
        b = 1'h1;
        c = 1'h1;
        if (M_edge_detector_out) begin
          M_state_d = ZERO_state;
          if (sum != 1'h1 | carry != 1'h1) begin
            M_state_d = ERROR_state;
          end
          M_dec_ctr_inc = 1'h1;
        end
      end
      ERROR_state: begin
        M_seg_values = 6'h2f;
        a = 1'h0;
        b = 1'h0;
        c = 1'h0;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
